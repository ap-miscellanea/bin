#!/usr/bin/env perl
use 5.010;
use strict;
use XML::LibXML;
use XML::Liberal;
use Getopt::Std;

sub del { $_->parentNode->removeChild( $_ ) for @_ }

my $p = XML::Liberal->new;

my $xpath = XML::LibXML::XPathContext->new;
$xpath->registerNs( a => 'http://www.w3.org/2005/Atom' );
$xpath->registerNs( h => 'http://www.w3.org/1999/xhtml' );

getopts 'e:', \my %opt;
my $expr = $opt{'e'};

my $first = $p->parse_file( @ARGV );
my $marker = do {
	my ( $last_entry ) = $xpath->findnodes( '/a:feed/a:entry[last()]/following-sibling::text()[1]', $first );
	$first->documentElement->insertBefore( $first->createComment(''), $last_entry );
};

del $xpath->findnodes( '/a:feed/a:entry|/a:feed/a:entry/preceding-sibling::text()[1]', $first );

my $ws;
while ( @ARGV ) {
	my $next = $p->parse_file( shift @ARGV );
	for my $entry ( $xpath->findnodes( '/a:feed/a:entry', $next ) ) {
		next if $expr and not $xpath->exists( $expr, $entry );
		$first->documentElement->insertBefore( $ws, $marker )
			if ( $ws ) = $xpath->findnodes( 'preceding-sibling::text()[1]', $entry );
		$first->documentElement->insertBefore( $entry, $marker );
	}
}

del $marker;

$first->toFH( \*STDOUT );
